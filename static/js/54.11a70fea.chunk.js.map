{"version":3,"sources":["../../common/formFields/PFEP/PFEPBasicDetails.formFields.js","../../common/formFields/PFEP/PFEPCreation.formFields.js","forms/PFEP/PFEPBasicDetails.form.js"],"names":["PREPBasicDetailsFormFields","key","type","FORM_ELEMENT_TYPES","DATE","others","kwargs","placeholder","INPUT","customLabel","PREPCreationFormFields","PFEPBasicDetailsForm","id","onCancel","lead","onNext","active","useState","loading","setLoading","useForm","form","dispatch","useDispatch","state","useSelector","e","data","pfepData","submit","a","ADD_PFEP_DATA","ADD_PFEP_BASIC_DATA","lead_no","useEffect","STOP_STEP_LOADING","spinning","initialValues","date","moment","onFinish","layout","autoComplete","orientation","style","justifyContent","slice","map","item","idx","span","toString","className","formItem","List","name","fields","add","remove","field","index","align","noLabel","formOptions","fieldKey","top","onClick","MinusCircleOutlined","Item","temp","getFieldValue","undefined","length","notification","info","message","block","PlusOutlined","justify","htmlType","disabled","ArrowRightOutlined","fontSize"],"mappings":"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","file":"static/js/54.11a70fea.chunk.js","sourcesContent":["import { FORM_ELEMENT_TYPES } from 'web/src/constants/formFields.constant';\n\nexport const PREPBasicDetailsFormFields = [\n  {\n    key: 'date',\n    type: FORM_ELEMENT_TYPES.DATE,\n    others: null,\n  },\n  {\n    key: 'contact_person',\n    kwargs: {\n      placeholder: 'Contact Person Name',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Contact Person Name',\n  },\n  {\n    key: 'designation',\n    kwargs: {\n      placeholder: 'Designation',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n  },\n  {\n    key: 'email',\n    kwargs: {\n      placeholder: 'Email',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Email',\n  },\n  {\n    key: 'contact_no',\n    kwargs: {\n      placeholder: 'Contact Number',\n      type:'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Contact Number',\n  },\n]\n","import { FORM_ELEMENT_TYPES } from 'web/src/constants/formFields.constant';\n\nexport const PREPCreationFormFields = [\n  {\n    key: 'proposal_for_client',\n    customLabel: 'Proposal For Client',\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    kwargs: {\n      placeholder: 'Proposal For Client',\n    },\n  },\n\n  {\n    key: 'sender_client',\n    kwargs: {\n      placeholder: 'Sender Client',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Sender Client',\n  },\n  {\n    key: 'sender_location',\n    kwargs: {\n      placeholder: 'Sender Location',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Sender Location',\n  },\n  {\n    key: 'name',\n    kwargs: {\n      placeholder: 'Receiver Client',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Receiver Client',\n  },{\n    key: 'location',\n    kwargs: {\n      placeholder: 'Receiver Location',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Receiver Location',\n  },\n]\n","import React, { useEffect, useState } from 'react';\nimport { Form, Col, Row, Button, Divider, Spin, notification } from 'antd';\nimport { ArrowRightOutlined, MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport { PREPBasicDetailsFormFields } from 'common/formFields/PFEP/PFEPBasicDetails.formFields';\nimport formItem from 'hocs/formItem.hoc';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_PFEP_BASIC_DATA, ADD_PFEP_DATA, STOP_STEP_LOADING } from 'common/actions';\nimport { PREPCreationFormFields } from 'common/formFields/PFEP/PFEPCreation.formFields';\nimport moment from 'moment';\n\nexport const PFEPBasicDetailsForm = ({ id, onCancel,lead,onNext,active }) => {\n  const [loading,setLoading] = useState(false);\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const state =  useSelector(e=>(e.data.pfepData))\n\n  const submit = async (data) =>{\n    setLoading(true)\n    await dispatch({ type:id?ADD_PFEP_DATA:ADD_PFEP_BASIC_DATA,data:{ ...data,lead_no:lead } });\n    setLoading(false)\n    if(active === 0){\n      onNext();\n    }\n  }\n\n  useEffect( ()=>{\n    if(active!==0){\n      form.submit()\n      dispatch({ type:STOP_STEP_LOADING })\n    }\n  },[active])\n\n  return (\n    <Spin spinning={loading}>\n      <Form\n        initialValues={{ ...state,date:state.date?moment(state.date):null }}\n        onFinish={submit}\n        form={form}\n        layout='vertical'\n        // hideRequiredMark\n        autoComplete='off'\n      >\n        <Divider orientation='left'>Basic Details</Divider>\n        <Row style={{ justifyContent: 'left' }}>\n          {PREPBasicDetailsFormFields.slice(0, 1).map((item, idx) => (\n            <Col span={4}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n          {PREPBasicDetailsFormFields.slice(1, 5).map((item, idx) => (\n            <Col span={5}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Divider orientation='left'>PFEP Creation</Divider>\n        <Row style={{ justifyContent: 'left' }}>\n          {PREPCreationFormFields.slice(0, 3).map((item, idx) => (\n            <Col span={8}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Form.List name='receivers'>\n          {(fields, { add, remove, }) => {\n            return (\n              <div>\n                {fields.map((field, index) => (\n                  <Row align='middle'>\n                    {PREPCreationFormFields.slice(3, 5).map((item) => (\n                      <Col span={5}>\n                        <div className='p-2'>\n                          {formItem({\n                            ...item,\n                            noLabel: index !== 0,\n                            form,\n                            others: {\n                              formOptions: {\n                                ...field,\n                                name: [field.name, item.key],\n                                fieldKey: [field.fieldKey, item.key],\n                              },\n                            },\n                          })}\n                        </div>\n                      </Col>\n                    ))}\n                    <Button\n                      type='danger'\n                      style={index !== 0 ? { top: '-2vh' } : null}\n                      onClick={() => {\n                        remove(field.name);\n                      }}>\n                      <MinusCircleOutlined />\n                      {' '}\n                      Delete\n                    </Button>\n                  </Row>\n                ))}\n                <Form.Item>\n                  <Button\n                    type='dashed'\n                    onClick={() => {\n                      const temp = form.getFieldValue('receivers')\n                      if( temp === undefined || temp.length<1){\n                        add();\n                      }else{\n                        notification.info({ message:\"Only One receiver can be added!\" })\n                      }\n                    }}\n                    block>\n                    <PlusOutlined />\n                    {' '}\n                    Add Receiver\n                  </Button>\n                </Form.Item>\n              </div>\n            );\n          }}\n        </Form.List>\n        <Row justify='space-between'>\n          <div className='row'>\n            <Button type='primary' htmlType='submit' disabled>\n              Submit\n            </Button>\n            <div className='p-2' />\n            <Button type='primary' onClick={onCancel}>\n              Cancel\n            </Button>\n          </div>\n          <Button type='link' htmlType='submit'>\n            <ArrowRightOutlined style={{ fontSize:30 }}  />\n          </Button>\n        </Row>\n      </Form>\n    </Spin>\n  );\n};\n\nexport default PFEPBasicDetailsForm;\n\n"],"sourceRoot":""}