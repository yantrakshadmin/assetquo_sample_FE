{"version":3,"sources":["constants/formFields.constant.js","hocs/formItem.hoc.js","../../common/formFields/createCP/operatingCostMonthly.formFields.js","forms/CreateCP/operatingCostMonthlyCreateCP.form.js"],"names":["FORM_ELEMENT_TYPES","INPUT","MULTIPLE_CHECKBOX","INPUT_NUMBER","PASSWORD","TEXTAREA","MARKDOWN","SELECT","CAPTCHA","MONTH_PICKER","FILE_DRAG_DROP","RANGE_PICKER","RADIO","SWITCH","HIDDEN","DATE","CASCADER","Option","CheckboxGroup","Group","props","name","action","file","Promise","resolve","reject","setTimeout","reader","FileReader","addEventListener","result","readAsDataURL","FormItem","key","rules","kwargs","type","others","customLabel","noLabel","formOptions","Item","label","charAt","toUpperCase","slice","size","Dragger","style","maxHeight","width","className","p1","p2","shouldUpdate","selectOptions","map","item","index","toString","search","customTitle","value","fontSize","fontWeight","dataKeys","flexWrap","i","marginLeft","marginRight","radioOptions","onChange","date","checkOptions","valuePropName","operatingCostMonthlyFormFields","placeholder","noStyle","LogisticCreateCPForm","id","onCancel","onDone","active","onNext","useState","loading","setLoading","useForm","form","dispatch","useDispatch","state","useSelector","e","data","createCPData","submit","a","ADD_CREATE_CP_DATA","editCP","error","notification","warning","message","description","createCP","useEffect","STOP_STEP_LOADING","spinning","orientation","onFinish","initialValues","layout","autoComplete","justifyContent","idx","span","formItem","justify","htmlType","onClick"],"mappings":"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","file":"static/js/51.3199aa3c.chunk.js","sourcesContent":["export const FORM_ELEMENT_TYPES = {\n  INPUT: 'input',\n  MULTIPLE_CHECKBOX: 'MULTIPLE_CHECKBOX',\n  INPUT_NUMBER: 'input-number',\n  PASSWORD: 'password',\n  TEXTAREA: 'textarea',\n  MARKDOWN: 'markdown',\n  SELECT: 'select',\n  CAPTCHA: 'captcha',\n  MONTH_PICKER: 'month-picker',\n  FILE_DRAG_DROP: 'file-drag-drop',\n  RANGE_PICKER: 'range-picker',\n  RADIO: 'radio',\n  SWITCH: 'switch',\n  HIDDEN: 'hidden',\n  DATE: 'date',\n  CASCADER: 'cascader',\n};\n\nexport const SUBMIT_FORM = 'SUBMIT_FORM';\n\nexport const CAPTCHA = {\n  type: FORM_ELEMENT_TYPES.CAPTCHA,\n  name: 'captcha',\n  label: 'Captcha',\n  rules: [\n    {\n      required: process.env.NODE_ENV === 'production',\n      message: 'Please solve the captcha',\n    },\n  ],\n};\n","import React from 'react';\nimport {\n  Form,\n  Input,\n  Upload,\n  Select,\n  Radio,\n  DatePicker,\n  Checkbox,\n  InputNumber,\n  message,\n  Switch,\n} from 'antd';\nimport { Icon } from '@ant-design/compatible';\nimport { FORM_ELEMENT_TYPES } from 'constants/formFields.constant';\n\nconst { Option } = Select;\nconst CheckboxGroup = Checkbox.Group;\n\n// const handleUplaod = (file) => {\n//   return new Promise(async (resolve, reject) => {\n//     const fileName = `nameThatIwant.type`;\n//     const url = await S3Fetcher.getPresignedUrl(fileName);\n//     resolve(url);\n//   });\n\nconst onCustomRequest = (file) => {\n  return new Promise((resolve, reject) => {\n    const ajaxResponseWasFine = true;\n\n    setTimeout(() => {\n      if (ajaxResponseWasFine) {\n        const reader = new FileReader();\n\n        reader.addEventListener(\n          'load',\n          () => {\n            resolve(reader.result);\n          },\n          false,\n        );\n\n        if (file) {\n          reader.readAsDataURL(file);\n        }\n      } else {\n        reject('error');\n      }\n    }, 1000);\n  });\n};\n\nconst props = {\n  name: 'file',\n  action: onCustomRequest,\n  // onChange(info) {\n  //   const {status} = info.file;\n  //   if (status !== 'uploading') {\n  //     console.log(info.file, info.fileList);\n  //   }\n  //   if (status === 'done') {\n  //     message.success(`${info.file.name} file uploaded successfully.`);\n  //   } else if (status === 'error') {\n  //     message.error(`${info.file.name} file upload failed.`);\n  //   }\n  // },\n};\n\nconst FormItem = ({ key, rules, kwargs, type, others, customLabel, noLabel }) => {\n  let formOptions = {};\n  if (others) {\n    if (others.formOptions) {\n      formOptions = others.formOptions;\n    }\n  }\n\n  switch (type) {\n    case FORM_ELEMENT_TYPES.INPUT: {\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Input {...kwargs} size='middle' />\n        </Form.Item>\n      );\n    }\n\n    case FORM_ELEMENT_TYPES.INPUT_NUMBER:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <InputNumber {...kwargs} size='middle' />\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.FILE_DRAG_DROP:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Upload.Dragger {...kwargs} {...props} style={{ maxHeight: '75px', width: '150px' }}>\n            <p className='ant-upload-drag-icon'>\n              <Icon type='inbox' />\n            </p>\n            {others ? (\n              <>\n                <p className='ant-upload-text p-1'>{others.p1}</p>\n                <p className='ant-upload-hint p-1'>{others.p2}</p>\n              </>\n            ) : null}\n          </Upload.Dragger>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.SELECT:\n      return (\n        <Form.Item\n          shouldUpdate\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Select {...kwargs}>\n            {others.selectOptions.map((item, index) => (\n              <Option\n                key={index.toString()}\n                search={item[others.customTitle]}\n                value={item.value || item[others.key] || item}>\n                {others.customTitle ? (\n                  <text style={{ fontSize: 13, fontWeight: 'bold' }}>\n                    {item[others.customTitle]}\n                  </text>\n                ) : (\n                  item.label || item[others.key] || item\n                )}\n                {others.dataKeys ? (\n                  <div className='row' style={{ flexWrap: 'wrap' }}>\n                    {others.dataKeys.map((i) => (\n                      <text style={{ fontSize: 11, marginLeft: 5, marginRight: 5 }}>{item[i]}</text>\n                    ))}\n                  </div>\n                ) : null}\n              </Option>\n            ))}\n          </Select>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.RADIO:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Radio.Group value='Ggg'>\n            {others.radioOptions.map((item) => (\n              <Radio key={item.value} value={item.value}>\n                {item.label}\n              </Radio>\n            ))}\n          </Radio.Group>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.DATE:\n      return (\n        <Form.Item\n          key={key}\n          {...formOptions}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}>\n          <DatePicker onChange={(date) => console.log(date)} />\n        </Form.Item>\n      );\n    case FORM_ELEMENT_TYPES.MULTIPLE_CHECKBOX:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <CheckboxGroup onChange={others.onChange}>\n            {others.checkOptions.map((i) => (\n              <Checkbox value={i.value}>{i.label}</Checkbox>\n            ))}\n          </CheckboxGroup>\n        </Form.Item>\n      );\n    case FORM_ELEMENT_TYPES.SWITCH:\n      return (\n        <Form.Item\n          key={key}\n          valuePropName='checked'\n          {...formOptions}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}>\n          <Switch {...kwargs} />\n        </Form.Item>\n      );\n    default:\n      return null;\n  }\n};\n\nexport default FormItem;\n","import { FORM_ELEMENT_TYPES } from 'web/src/constants/formFields.constant';\n\n\nexport const operatingCostMonthlyFormFields = [\n\n  {\n    key: 'operating_cost',\n    kwargs: {\n      placeholder: 'Operating Cost',\n      type: 'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true },\n    }, customLabel: 'Operating Cost',\n  },\n  {\n    key: 'contingency_margin',\n    kwargs: {\n      placeholder: 'Contingency Margin',\n      type: 'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true },\n    }, customLabel: 'Contingency Margin',\n  },\n  {\n    key: 'min_cost_to_bill_for_a_trip',\n    kwargs: {\n      placeholder: 'Min cost to bill for a trip',\n      type: 'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true },\n    }, customLabel: 'Min cost to bill for a trip',\n  },\n  {\n    key: 'price_should_be_billed',\n    kwargs: {\n      placeholder: 'Price should be billed @ 20% margin',\n      type: 'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true },\n    }, customLabel: 'Price should be billed @ 20% margin',\n  },\n  {\n    key: 'margin_agreed_for_this_flow',\n    kwargs: {\n      placeholder: 'Margin agreed for this flow',\n      type: 'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true },\n    }, customLabel: 'Margin agreed for this flow',\n  },\n  {\n    key: 'trip_cost_sales',\n    kwargs: {\n      placeholder: 'TRIP COST (SALES)',\n      type: 'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true },\n    }, customLabel: 'TRIP COST (SALES)',\n  },\n  {\n    key: 'gross_margins',\n    kwargs: {\n      placeholder: 'Gross Margins',\n      type: 'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true },\n    }, customLabel: 'Gross Margins',\n  },\n  {\n    key: 'remark_operating_cost',\n    kwargs: {\n      placeholder: 'Remark',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true },\n    }, customLabel: 'Remark',\n  },\n];\n","import React, { useEffect, useState } from 'react';\nimport { Form, Col, Row, Button, Divider, Spin, notification } from 'antd';\nimport formItem from 'hocs/formItem.hoc';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_CREATE_CP_DATA, STOP_STEP_LOADING } from 'common/actions';\nimport { operatingCostMonthlyFormFields }\n  from 'common/formFields/createCP/operatingCostMonthly.formFields';\nimport { createCP, editCP } from 'common/api/auth';\n\nexport const LogisticCreateCPForm = ({ id, onCancel,onDone,active,onNext }) => {\n  const [loading,setLoading] = useState(false);\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const state =  useSelector(e=>(e.data.createCPData))\n\n\n  const submit = async (data) =>{\n    setLoading(true)\n    await dispatch({ type:ADD_CREATE_CP_DATA,data });\n    setLoading(false)\n    if(active === 3){\n      if(id){\n        const { error } = await editCP(id,{ ...state,...data });\n        if (error) {\n          notification.warning({\n            message: 'Unable To Edit.',\n            description:\n              'Something went wrong CP editing failed.',\n          });\n          onCancel();\n        } else {\n          onDone();\n        }\n      }\n      else{\n        const { error } = await createCP({ ...state,...data });\n        if (error) {\n          notification.warning({\n            message: 'Unable To Create.',\n            description:\n              'Something went wrong CP creation failed.',\n          });\n          onCancel();\n        } else {\n          onDone();\n        }\n      }\n    }}\n\n  useEffect( ()=>{\n    if(active!==3){\n      form.submit()\n      dispatch({ type:STOP_STEP_LOADING })\n    }\n  },[active])\n\n  return (\n    <Spin spinning={loading}>\n      <Divider orientation='left'>Opex</Divider>\n      <Form\n        onFinish={submit}\n        form={form}\n        initialValues={\n          { ...state }\n        }\n        layout='vertical'\n        // hideRequiredMark\n        autoComplete='off'\n      >\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(0, 4).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {item.customLabel}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(0, 4).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(4, 8).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {item.customLabel}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(4, 8).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(8, 12).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {item.customLabel}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(8,12).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(12, 16).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {item.customLabel}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(12,16).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(16, 18).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {item.customLabel}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(16,18).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row justify='space-between'>\n          <div className='row'>\n            <Button type='primary' htmlType='submit'>\n              Submit\n            </Button>\n            <div className='p-2' />\n            <Button type='primary' onClick={onCancel}>\n              Cancel\n            </Button>\n          </div>\n        </Row>\n      </Form>\n    </Spin>\n  );\n};\n\nexport default LogisticCreateCPForm;\n\n"],"sourceRoot":""}