{"version":3,"sources":["constants/formFields.constant.js","hocs/formItem.hoc.js","../../common/formFields/createCP/operatingCostMonthly.formFields.js","forms/CreateCP/operatingCostMonthlyCreateCP.form.js"],"names":["FORM_ELEMENT_TYPES","INPUT","MULTIPLE_CHECKBOX","INPUT_NUMBER","PASSWORD","TEXTAREA","MARKDOWN","SELECT","CAPTCHA","MONTH_PICKER","FILE_DRAG_DROP","RANGE_PICKER","RADIO","SWITCH","HIDDEN","DATE","CASCADER","Option","CheckboxGroup","Group","props","name","action","file","Promise","resolve","reject","setTimeout","reader","FileReader","addEventListener","result","readAsDataURL","FormItem","key","rules","kwargs","type","others","customLabel","noLabel","formOptions","Item","label","charAt","toUpperCase","slice","size","Dragger","style","maxHeight","width","className","p1","p2","shouldUpdate","selectOptions","map","item","index","toString","search","customTitle","value","fontSize","fontWeight","dataKeys","flexWrap","i","marginLeft","marginRight","radioOptions","onChange","date","checkOptions","valuePropName","operatingCostMonthlyFormFields","placeholder","noStyle","LogisticCreateCPForm","id","onCancel","onDone","active","onNext","useState","loading","setLoading","useForm","form","dispatch","useDispatch","state","useSelector","e","data","createCPData","submit","a","ADD_CREATE_CP_DATA","editCP","error","notification","warning","message","description","createCP","useEffect","STOP_STEP_LOADING","spinning","orientation","onFinish","initialValues","layout","autoComplete","justifyContent","idx","span","formItem","justify","htmlType","onClick"],"mappings":"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","file":"static/js/51.7d98135f.chunk.js","sourcesContent":["export const FORM_ELEMENT_TYPES = {\r\n  INPUT: 'input',\r\n  MULTIPLE_CHECKBOX: 'MULTIPLE_CHECKBOX',\r\n  INPUT_NUMBER: 'input-number',\r\n  PASSWORD: 'password',\r\n  TEXTAREA: 'textarea',\r\n  MARKDOWN: 'markdown',\r\n  SELECT: 'select',\r\n  CAPTCHA: 'captcha',\r\n  MONTH_PICKER: 'month-picker',\r\n  FILE_DRAG_DROP: 'file-drag-drop',\r\n  RANGE_PICKER: 'range-picker',\r\n  RADIO: 'radio',\r\n  SWITCH: 'switch',\r\n  HIDDEN: 'hidden',\r\n  DATE: 'date',\r\n  CASCADER: 'cascader',\r\n};\r\n\r\nexport const SUBMIT_FORM = 'SUBMIT_FORM';\r\n\r\nexport const CAPTCHA = {\r\n  type: FORM_ELEMENT_TYPES.CAPTCHA,\r\n  name: 'captcha',\r\n  label: 'Captcha',\r\n  rules: [\r\n    {\r\n      required: process.env.NODE_ENV === 'production',\r\n      message: 'Please solve the captcha',\r\n    },\r\n  ],\r\n};\r\n","import React from 'react';\r\nimport {\r\n  Form,\r\n  Input,\r\n  Upload,\r\n  Select,\r\n  Radio,\r\n  DatePicker,\r\n  Checkbox,\r\n  InputNumber,\r\n  message,\r\n  Switch,\r\n} from 'antd';\r\nimport { Icon } from '@ant-design/compatible';\r\nimport { FORM_ELEMENT_TYPES } from 'constants/formFields.constant';\r\n\r\nconst { Option } = Select;\r\nconst CheckboxGroup = Checkbox.Group;\r\n\r\n// const handleUplaod = (file) => {\r\n//   return new Promise(async (resolve, reject) => {\r\n//     const fileName = `nameThatIwant.type`;\r\n//     const url = await S3Fetcher.getPresignedUrl(fileName);\r\n//     resolve(url);\r\n//   });\r\n\r\nconst onCustomRequest = (file) => {\r\n  return new Promise((resolve, reject) => {\r\n    const ajaxResponseWasFine = true;\r\n\r\n    setTimeout(() => {\r\n      if (ajaxResponseWasFine) {\r\n        const reader = new FileReader();\r\n\r\n        reader.addEventListener(\r\n          'load',\r\n          () => {\r\n            resolve(reader.result);\r\n          },\r\n          false,\r\n        );\r\n\r\n        if (file) {\r\n          reader.readAsDataURL(file);\r\n        }\r\n      } else {\r\n        reject('error');\r\n      }\r\n    }, 1000);\r\n  });\r\n};\r\n\r\nconst props = {\r\n  name: 'file',\r\n  action: onCustomRequest,\r\n  // onChange(info) {\r\n  //   const {status} = info.file;\r\n  //   if (status !== 'uploading') {\r\n  //     console.log(info.file, info.fileList);\r\n  //   }\r\n  //   if (status === 'done') {\r\n  //     message.success(`${info.file.name} file uploaded successfully.`);\r\n  //   } else if (status === 'error') {\r\n  //     message.error(`${info.file.name} file upload failed.`);\r\n  //   }\r\n  // },\r\n};\r\n\r\nconst FormItem = ({ key, rules, kwargs, type, others, customLabel, noLabel }) => {\r\n  let formOptions = {};\r\n  if (others) {\r\n    if (others.formOptions) {\r\n      formOptions = others.formOptions;\r\n    }\r\n  }\r\n\r\n  switch (type) {\r\n    case FORM_ELEMENT_TYPES.INPUT: {\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <Input {...kwargs} size='middle' />\r\n        </Form.Item>\r\n      );\r\n    }\r\n\r\n    case FORM_ELEMENT_TYPES.INPUT_NUMBER:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <InputNumber {...kwargs} size='middle' />\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.FILE_DRAG_DROP:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <Upload.Dragger {...kwargs} {...props} style={{ maxHeight: '75px', width: '150px' }}>\r\n            <p className='ant-upload-drag-icon'>\r\n              <Icon type='inbox' />\r\n            </p>\r\n            {others ? (\r\n              <>\r\n                <p className='ant-upload-text p-1'>{others.p1}</p>\r\n                <p className='ant-upload-hint p-1'>{others.p2}</p>\r\n              </>\r\n            ) : null}\r\n          </Upload.Dragger>\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.SELECT:\r\n      return (\r\n        <Form.Item\r\n          shouldUpdate\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <Select {...kwargs}>\r\n            {others.selectOptions.map((item, index) => (\r\n              <Option\r\n                key={index.toString()}\r\n                search={item[others.customTitle]}\r\n                value={item.value || item[others.key] || item}>\r\n                {others.customTitle ? (\r\n                  <text style={{ fontSize: 13, fontWeight: 'bold' }}>\r\n                    {item[others.customTitle]}\r\n                  </text>\r\n                ) : (\r\n                  item.label || item[others.key] || item\r\n                )}\r\n                {others.dataKeys ? (\r\n                  <div className='row' style={{ flexWrap: 'wrap' }}>\r\n                    {others.dataKeys.map((i) => (\r\n                      <text style={{ fontSize: 11, marginLeft: 5, marginRight: 5 }}>{item[i]}</text>\r\n                    ))}\r\n                  </div>\r\n                ) : null}\r\n              </Option>\r\n            ))}\r\n          </Select>\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.RADIO:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <Radio.Group value='Ggg'>\r\n            {others.radioOptions.map((item) => (\r\n              <Radio key={item.value} value={item.value}>\r\n                {item.label}\r\n              </Radio>\r\n            ))}\r\n          </Radio.Group>\r\n        </Form.Item>\r\n      );\r\n\r\n    case FORM_ELEMENT_TYPES.DATE:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          {...formOptions}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}>\r\n          <DatePicker onChange={(date) => console.log(date)} />\r\n        </Form.Item>\r\n      );\r\n    case FORM_ELEMENT_TYPES.MULTIPLE_CHECKBOX:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}\r\n          {...formOptions}>\r\n          <CheckboxGroup onChange={others.onChange}>\r\n            {others.checkOptions.map((i) => (\r\n              <Checkbox value={i.value}>{i.label}</Checkbox>\r\n            ))}\r\n          </CheckboxGroup>\r\n        </Form.Item>\r\n      );\r\n    case FORM_ELEMENT_TYPES.SWITCH:\r\n      return (\r\n        <Form.Item\r\n          key={key}\r\n          valuePropName='checked'\r\n          {...formOptions}\r\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\r\n          name={key}\r\n          rules={rules}>\r\n          <Switch {...kwargs} />\r\n        </Form.Item>\r\n      );\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nexport default FormItem;\r\n","import { FORM_ELEMENT_TYPES } from 'web/src/constants/formFields.constant';\r\n\r\n\r\nexport const operatingCostMonthlyFormFields = [\r\n\r\n  {\r\n    key: 'operating_cost',\r\n    kwargs: {\r\n      placeholder: 'Operating Cost',\r\n      type: 'number',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: { noStyle: true },\r\n    }, customLabel: 'Operating Cost',\r\n  },\r\n  {\r\n    key: 'contingency_margin',\r\n    kwargs: {\r\n      placeholder: 'Contingency Margin',\r\n      type: 'number',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: { noStyle: true },\r\n    }, customLabel: 'Contingency Margin',\r\n  },\r\n  {\r\n    key: 'min_cost_to_bill_for_a_trip',\r\n    kwargs: {\r\n      placeholder: 'Min cost to bill for a trip',\r\n      type: 'number',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: { noStyle: true },\r\n    }, customLabel: 'Min cost to bill for a trip',\r\n  },\r\n  {\r\n    key: 'price_should_be_billed',\r\n    kwargs: {\r\n      placeholder: 'Price should be billed @ 20% margin',\r\n      type: 'number',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: { noStyle: true },\r\n    }, customLabel: 'Price should be billed @ 20% margin',\r\n  },\r\n  {\r\n    key: 'margin_agreed_for_this_flow',\r\n    kwargs: {\r\n      placeholder: 'Margin agreed for this flow',\r\n      type: 'number',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: { noStyle: true },\r\n    }, customLabel: 'Margin agreed for this flow',\r\n  },\r\n  {\r\n    key: 'trip_cost_sales',\r\n    kwargs: {\r\n      placeholder: 'TRIP COST (SALES)',\r\n      type: 'number',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: { noStyle: true },\r\n    }, customLabel: 'TRIP COST (SALES)',\r\n  },\r\n  {\r\n    key: 'gross_margins',\r\n    kwargs: {\r\n      placeholder: 'Gross Margins',\r\n      type: 'number',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: { noStyle: true },\r\n    }, customLabel: 'Gross Margins',\r\n  },\r\n  {\r\n    key: 'remark_operating_cost',\r\n    kwargs: {\r\n      placeholder: 'Remark',\r\n    },\r\n    type: FORM_ELEMENT_TYPES.INPUT,\r\n    others: {\r\n      formOptions: { noStyle: true },\r\n    }, customLabel: 'Remark',\r\n  },\r\n];\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Form, Col, Row, Button, Divider, Spin, notification } from 'antd';\r\nimport formItem from 'hocs/formItem.hoc';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ADD_CREATE_CP_DATA, STOP_STEP_LOADING } from 'common/actions';\r\nimport { operatingCostMonthlyFormFields }\r\n  from 'common/formFields/createCP/operatingCostMonthly.formFields';\r\nimport { createCP, editCP } from 'common/api/auth';\r\n\r\nexport const LogisticCreateCPForm = ({ id, onCancel,onDone,active,onNext }) => {\r\n  const [loading,setLoading] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const dispatch = useDispatch();\r\n  const state =  useSelector(e=>(e.data.createCPData))\r\n\r\n\r\n  const submit = async (data) =>{\r\n    setLoading(true)\r\n    await dispatch({ type:ADD_CREATE_CP_DATA,data });\r\n    setLoading(false)\r\n    if(active === 3){\r\n      if(id){\r\n        const { error } = await editCP(id,{ ...state,...data });\r\n        if (error) {\r\n          notification.warning({\r\n            message: 'Unable To Edit.',\r\n            description:\r\n              'Something went wrong CP editing failed.',\r\n          });\r\n          onCancel();\r\n        } else {\r\n          onDone();\r\n        }\r\n      }\r\n      else{\r\n        const { error } = await createCP({ ...state,...data });\r\n        if (error) {\r\n          notification.warning({\r\n            message: 'Unable To Create.',\r\n            description:\r\n              'Something went wrong CP creation failed.',\r\n          });\r\n          onCancel();\r\n        } else {\r\n          onDone();\r\n        }\r\n      }\r\n    }}\r\n\r\n  useEffect( ()=>{\r\n    if(active!==3){\r\n      form.submit()\r\n      dispatch({ type:STOP_STEP_LOADING })\r\n    }\r\n  },[active])\r\n\r\n  return (\r\n    <Spin spinning={loading}>\r\n      <Divider orientation='left'>Opex</Divider>\r\n      <Form\r\n        onFinish={submit}\r\n        form={form}\r\n        initialValues={\r\n          { ...state }\r\n        }\r\n        layout='vertical'\r\n        // hideRequiredMark\r\n        autoComplete='off'\r\n      >\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {operatingCostMonthlyFormFields.slice(0, 4).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {item.customLabel}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {operatingCostMonthlyFormFields.slice(0, 4).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {operatingCostMonthlyFormFields.slice(4, 8).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {item.customLabel}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {operatingCostMonthlyFormFields.slice(4, 8).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {operatingCostMonthlyFormFields.slice(8, 12).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {item.customLabel}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {operatingCostMonthlyFormFields.slice(8,12).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {operatingCostMonthlyFormFields.slice(12, 16).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {item.customLabel}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {operatingCostMonthlyFormFields.slice(12,16).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {operatingCostMonthlyFormFields.slice(16, 18).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {item.customLabel}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row style={{ justifyContent: 'left' }}>\r\n          {operatingCostMonthlyFormFields.slice(16,18).map((item, idx) => (\r\n            <Col span={6}>\r\n              <div key={idx.toString()} className='p-2'>\r\n                {formItem(item)}\r\n              </div>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row justify='space-between'>\r\n          <div className='row'>\r\n            <Button type='primary' htmlType='submit'>\r\n              Submit\r\n            </Button>\r\n            <div className='p-2' />\r\n            <Button type='primary' onClick={onCancel}>\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n        </Row>\r\n      </Form>\r\n    </Spin>\r\n  );\r\n};\r\n\r\nexport default LogisticCreateCPForm;\r\n\r\n"],"sourceRoot":""}